version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "${RABBITMQ_AMQP_PORT:-5672}:${RABBITMQ_AMQP_PORT:-5672}"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:${RABBITMQ_MANAGEMENT_PORT:-15672}"
      - "${RABBITMQ_STOMP_PORT:-61613}:${RABBITMQ_STOMP_PORT:-61613}"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USERNAME:-guest}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-guest}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 20s
      retries: 10
      start_period: 60s
      timeout: 15s
    networks:
      - app_network

  cassandra:
    image: cassandra:latest
    container_name: cassandra
    environment:
      - CASSANDRA_CLUSTER_NAME=${CASSANDRA_CLUSTER_NAME}
      - CASSANDRA_DC=${CASSANDRA_DC}
      - CASSANDRA_RACK=${CASSANDRA_RACK}
      - CASSANDRA_NUM_TOKENS=${CASSANDRA_NUM_TOKENS}
      - CASSANDRA_SEEDS=${CASSANDRA_SEEDS}
      - CASSANDRA_KEYSPACE=${CASSANDRA_KEYSPACE}
    ports:
      - "${CASSANDRA_PORT:-9042}:${CASSANDRA_PORT:-9042}"
    volumes:
      - cassandra_data:/var/lib/cassandra
      - ./cql-scripts:/cql-scripts
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "cqlsh", "-e", "describe keyspaces"]
      interval: 30s
      retries: 10
      start_period: 30s
      timeout: 10s

  cql-executor:
    image: cassandra:latest
    depends_on:
      cassandra:
        condition: service_healthy
    volumes:
      - ./cql-scripts:/cql-scripts
    entrypoint: >
      bash -c "
      until cqlsh cassandra -e 'describe keyspaces'; do
        echo 'Waiting for Cassandra to be ready...';
        sleep 10;
      done;
      bash /cql-scripts/setup-keyspace.sh
      cqlsh cassandra -f /cql-scripts/setup-schema.cql"
    networks:
      - app_network

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    command: redis-server --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 5s
    networks:
      - app_network

volumes:
  rabbitmq_data:
  cassandra_data:
  redis_data:

networks:
  app_network:
    driver: bridge